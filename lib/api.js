// ========================================
// API CLIENT POUR HEALTHSAFE
// ========================================
// Fichier contenant toutes les fonctions d'API pour l'application HealthSafe
// URL de base : https://healthsafe-v1-production.up.railway.app/api

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://healthsafe-v1-production.up.railway.app/api';

// ========================================
// UTILITAIRES
// ========================================

/**
 * R√©cup√®re le token JWT depuis le localStorage ou les cookies
 * @returns {string|null} Le token JWT ou null s'il n'existe pas
 */
const getAuthToken = () => {
  if (typeof window !== 'undefined') {
    // Essayer d'abord le localStorage
    const localToken = localStorage.getItem('token');
    if (localToken) {
      return localToken;
    }
    
    // Si pas de token dans localStorage, essayer de r√©cup√©rer depuis les cookies
    // Note: Les cookies httpOnly ne sont pas accessibles via JavaScript
    // Le token sera automatiquement envoy√© par le navigateur avec credentials: 'include'
    return null;
  }
  return null;
};

/**
 * Cr√©e les headers pour les requ√™tes API
 * @param {boolean} includeAuth - Si true, inclut le header Authorization
 * @returns {Object} Les headers de la requ√™te
 */
const createHeaders = (includeAuth = true) => {
  const headers = {
    'Content-Type': 'application/json',
  };

  if (includeAuth) {
    const token = getAuthToken();
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
  }

  return headers;
};

/**
 * Effectue une requ√™te API avec gestion d'erreurs
 * @param {string} endpoint - L'endpoint de l'API
 * @param {Object} options - Les options de la requ√™te fetch
 * @returns {Promise<Object>} La r√©ponse JSON de l'API
 */
const apiRequest = async (endpoint, options = {}) => {
  try {
  const url = `${API_BASE_URL}${endpoint}`;
    
    // Log d√©taill√© pour diagnostiquer les probl√®mes
    console.log('üåê Appel API:', {
      url: url,
      method: options.method || 'GET',
      headers: {
        ...createHeaders(options.includeAuth !== false),
        ...options.headers,
      },
      body: options.body ? JSON.parse(options.body) : undefined,
      credentials: 'include'
    });

    const response = await fetch(url, {
      ...options,
      credentials: 'include', // Inclure les cookies cross-origin
      headers: {
        ...createHeaders(options.includeAuth !== false),
        ...options.headers,
      },
    });

    console.log('üì° R√©ponse API:', {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      url: response.url
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Erreur HTTP:', {
        status: response.status,
        statusText: response.statusText,
        errorData: errorData
      });
      throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Donn√©es re√ßues:', data);
    return data;
  } catch (error) {
    console.error('üí• Erreur API compl√®te:', {
      name: error.name,
      message: error.message,
      stack: error.stack,
      endpoint: endpoint,
      options: options
    });
    
    // Am√©liorer la gestion des erreurs r√©seau
    if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
      throw new Error('Impossible de se connecter au serveur. V√©rifiez votre connexion internet ou contactez l\'administrateur.');
    }
    throw error;
  }
};

// ========================================
// AUTHENTIFICATION
// ========================================

/**
 * Connexion utilisateur
 * @param {Object} credentials - Les identifiants de connexion
 * @param {string} credentials.email - Email de l'utilisateur
 * @param {string} credentials.password - Mot de passe
 * @returns {Promise<Object>} R√©ponse de l'API avec token
 */
export const login = async (credentials) => {
  return apiRequest('/auth/login', {
    method: 'POST',
    body: JSON.stringify(credentials),
    includeAuth: false,
    headers: {
      'Content-Type': 'application/json',
    },
  });
};

/**
 * R√©cup√®re l'utilisateur courant (via cookie httpOnly)
 * @returns {Promise<Object>} Le profil utilisateur
 */
export const getMe = async () => {
  return apiRequest('/auth/me', {
    method: 'GET',
    // includeAuth true par d√©faut; les cookies sont envoy√©s via credentials: 'include'
  });
};

/**
 * D√©connexion utilisateur
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const logout = async () => {
  return apiRequest('/auth/logout', {
    method: 'POST',
  });
};

/**
 * Inscription d'un patient
 * @param {Object} patientData - Les donn√©es du patient
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const registerPatient = async (patientData) => {
  return apiRequest('/auth/register-patient', {
    method: 'POST',
    body: JSON.stringify(patientData),
    includeAuth: false,
    headers: {
      'Content-Type': 'application/json',
    },
  });
};

/**
 * Inscription d'un m√©decin
 * @param {Object} medecinData - Les donn√©es du m√©decin
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const registerMedecin = async (medecinData) => {
  return apiRequest('/auth/register-medecin', {
    method: 'POST',
    body: JSON.stringify(medecinData),
    includeAuth: false,
    headers: {
      'Content-Type': 'application/json',
    },
  });
};

/**
 * V√©rification d'email avec token
 * @param {string} token - Le token de v√©rification
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const verifyEmail = async (token) => {
  return apiRequest(`/auth/verify/${token}`, {
    method: 'GET',
    includeAuth: false,
  });
};

/**
 * Demande de r√©initialisation de mot de passe
 * @param {Object} data - Les donn√©es de la demande
 * @param {string} data.email - Email de l'utilisateur
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const requestResetPassword = async (data) => {
  return apiRequest('/auth/request-reset-password', {
    method: 'POST',
    body: JSON.stringify(data),
    includeAuth: false,
  });
};

/**
 * R√©initialisation de mot de passe avec token
 * @param {string} token - Le token de r√©initialisation
 * @param {Object} data - Les nouvelles donn√©es de mot de passe
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const resetPassword = async (token, data) => {
  return apiRequest(`/auth/reset-password/${token}`, {
    method: 'POST',
    body: JSON.stringify(data),
    includeAuth: false,
  });
};

/**
 * Test de connectivit√© avec l'API
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const testApiConnection = async () => {
  return apiRequest('/test-login', {
    method: 'GET',
    includeAuth: false,
  });
};

/**
 * Test d√©taill√© de l'API avec logging complet
 * @returns {Promise<Object>} R√©sultat du test
 */
export const testApiDetailed = async () => {
  console.log('üß™ Test d√©taill√© de l\'API HealthSafe');
  console.log('üìç URL de base:', API_BASE_URL);
  
  try {
    // Test 1: Connexion de base
    console.log('\nüìã Test 1: Connexion de base');
    const testUrl = `${API_BASE_URL}/test-login`;
    console.log('URL test√©e:', testUrl);
    try {
      const response = await fetch(testUrl, {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('Statut:', response.status);
      console.log('Headers:', Object.fromEntries(response.headers.entries()));
      const data = await response.text();
      console.log('R√©ponse brute:', data);
    } catch (error) {
      console.error('Erreur lors du test de connexion de base:', error);
    }
    // Test 2: Test de login avec donn√©es factices
    console.log('\nüìã Test 2: Test de login');
    const loginUrl = `${API_BASE_URL}/auth/login`;
    console.log('URL login:', loginUrl);
    try {
      const loginResponse = await fetch(loginUrl, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: 'test@example.com',
          password: '123456'
        }),
      });
      console.log('Statut login:', loginResponse.status);
      console.log('Headers login:', Object.fromEntries(loginResponse.headers.entries()));
      const loginData = await loginResponse.text();
      console.log('R√©ponse login:', loginData);
    } catch (error) {
      console.error('Erreur lors du test de login:', error);
    }
    return {
      success: true,
      baseUrl: API_BASE_URL,
      testUrl: testUrl,
      loginUrl: loginUrl,
      testStatus: response.status,
      loginStatus: loginResponse.status,
      testData: data,
      loginData: loginData
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    return {
      success: false,
      error: error.message,
      baseUrl: API_BASE_URL
    };
  }
};

/**
 * R√©initialisation du code patient
 * @param {Object} data - Les donn√©es pour la r√©initialisation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const resetCodePatient = async (data) => {
  return apiRequest('/auth/reset-code-patient', {
    method: 'POST',
    body: JSON.stringify(data),
  });
};

// ========================================
// DOSSIERS M√âDICAUX
// ========================================

/**
 * Cr√©ation d'un nouveau dossier m√©dical
 * @param {Object} dossierData - Les donn√©es du dossier
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const createDossier = async (dossierData) => {
  return apiRequest('/dossiers/', {
    method: 'POST',
    body: JSON.stringify(dossierData),
  });
};

/**
 * R√©cup√©ration des dossiers d'un patient
 * @param {Object} patientData - Les donn√©es du patient
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getPatientDossiers = async (patientData) => {
  return apiRequest('/dossiers/patient', {
    method: 'POST',
    body: JSON.stringify(patientData),
  });
};

/**
 * R√©cup√©ration des autorisations d'un dossier
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getAutorisations = async (numeroDossier) => {
  return apiRequest(`/dossiers/numero/${numeroDossier}/autorisations`, {
    method: 'GET',
  });
};

/**
 * R√©cup√©ration d'un dossier sp√©cifique
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getDossier = async (numeroDossier) => {
  return apiRequest(`/dossiers/${numeroDossier}`, {
    method: 'GET',
  });
};

/**
 * Mise √† jour d'un dossier
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @param {Object} dossierData - Les nouvelles donn√©es du dossier
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const updateDossier = async (numeroDossier, dossierData) => {
  return apiRequest(`/dossiers/${numeroDossier}`, {
    method: 'PUT',
    body: JSON.stringify(dossierData),
  });
};

/**
 * R√©cup√©ration de l'historique d'un dossier
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getDossierHistorique = async (numeroDossier) => {
  return apiRequest(`/dossiers/${numeroDossier}/historique`, {
    method: 'GET',
  });
};

/**
 * Autorisation d'un m√©decin sur un dossier
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @param {Object} autorisationData - Les donn√©es d'autorisation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const autoriserMedecin = async (numeroDossier, autorisationData) => {
  return apiRequest(`/dossiers/${numeroDossier}/autoriser`, {
    method: 'POST',
    body: JSON.stringify(autorisationData),
  });
};

/**
 * Upload d'un fichier dans un dossier
 * @param {string} numeroDossier - Le num√©ro du dossier
 * @param {FormData} formData - Les donn√©es du fichier √† uploader
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const uploadFichier = async (numeroDossier, formData) => {
  try {
    const url = `${API_BASE_URL}/dossiers/${numeroDossier}/fichiers`;
    const token = getAuthToken();
    let response;
    try {
      response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          // Ne pas d√©finir Content-Type pour FormData
        },
        body: formData,
      });
    } catch (error) {
      console.error('Erreur r√©seau lors de l\'upload du fichier:', error);
      throw new Error('Erreur r√©seau lors de l\'upload du fichier.');
    }
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Erreur upload fichier:', error);
    throw error;
  }
};

// ========================================
// GESTION DES ACC√àS
// ========================================

/**
 * Demande d'acc√®s √† un dossier
 * @param {Object} demandeData - Les donn√©es de la demande
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const demanderAcces = async (demandeData) => {
  return apiRequest('/acces/demander', {
    method: 'POST',
    body: JSON.stringify(demandeData),
  });
};

/**
 * R√©ponse √† une demande d'acc√®s
 * @param {string} demandeId - L'ID de la demande
 * @param {Object} reponseData - Les donn√©es de la r√©ponse
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const repondreDemande = async (demandeId, reponseData) => {
  return apiRequest(`/acces/repondre/${demandeId}`, {
    method: 'POST',
    body: JSON.stringify(reponseData),
  });
};

/**
 * R√©vocation d'un acc√®s
 * @param {Object} revocationData - Les donn√©es de r√©vocation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const revoquerAcces = async (revocationData) => {
  return apiRequest('/acces/revoquer', {
    method: 'POST',
    body: JSON.stringify(revocationData),
  });
};

/**
 * Liste des acc√®s autoris√©s
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const listeAcces = async () => {
  return apiRequest('/acces/liste', {
    method: 'GET',
  });
};

// ========================================
// ADMINISTRATION
// ========================================

/**
 * Promotion d'un m√©decin en admin
 * @param {Object} promotionData - Les donn√©es de promotion
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const promouvoirMedecinEnAdmin = async (promotionData) => {
  return apiRequest('/admin/promouvoir-medecin', {
    method: 'POST',
    body: JSON.stringify(promotionData),
  });
};

/**
 * Validation d'un admin d'h√¥pital
 * @param {Object} validationData - Les donn√©es de validation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const validerAdminHopital = async (validationData) => {
  return apiRequest('/admin/valider-admin', {
    method: 'POST',
    body: JSON.stringify(validationData),
  });
};

/**
 * R√©vocation d'un admin d'h√¥pital
 * @param {Object} revocationData - Les donn√©es de r√©vocation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const revoquerAdmin = async (revocationData) => {
  return apiRequest('/admin/admin-hopital', {
    method: 'DELETE',
    body: JSON.stringify(revocationData),
  });
};

/**
 * Validation d'un m√©decin
 * @param {Object} validationData - Les donn√©es de validation
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const validerMedecin = async (validationData) => {
  return apiRequest('/admin/valider-medecin', {
    method: 'POST',
    body: JSON.stringify(validationData),
  });
};

/**
 * R√©cup√©ration de la liste des m√©decins
 * @param {Object} queryParams - Param√®tres de requ√™te (optionnel)
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getMedecins = async (queryParams = {}) => {
  const queryString = new URLSearchParams(queryParams).toString();
  const endpoint = queryString ? `/admin/medecins?${queryString}` : '/admin/medecins';
  
  return apiRequest(endpoint, {
    method: 'GET',
  });
};

/**
 * Recherche de m√©decins
 * @param {Object} searchParams - Param√®tres de recherche
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const searchMedecins = async (searchParams) => {
  const queryString = new URLSearchParams(searchParams).toString();
  return apiRequest(`/admin/medecins/search?${queryString}`, {
    method: 'GET',
  });
};

/**
 * Suppression d'un m√©decin
 * @param {Object} suppressionData - Les donn√©es de suppression
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const supprimerMedecin = async (suppressionData) => {
  return apiRequest('/admin/medecins', {
    method: 'DELETE',
    body: JSON.stringify(suppressionData),
  });
};

/**
 * R√©cup√©ration de la liste des utilisateurs
 * @param {Object} queryParams - Param√®tres de requ√™te (optionnel)
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getUtilisateurs = async (queryParams = {}) => {
  const queryString = new URLSearchParams(queryParams).toString();
  const endpoint = queryString ? `/admin/utilisateurs?${queryString}` : '/admin/utilisateurs';
  
  return apiRequest(endpoint, {
    method: 'GET',
  });
};

/**
 * R√©activation d'un utilisateur
 * @param {string} id - L'ID de l'utilisateur
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const reactiverUtilisateur = async (id) => {
  return apiRequest(`/admin/utilisateurs/${id}/reactiver`, {
    method: 'PUT',
  });
};

/**
 * R√©cup√©ration des logs syst√®me
 * @param {Object} queryParams - Param√®tres de requ√™te (optionnel)
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const getLogs = async (queryParams = {}) => {
  const queryString = new URLSearchParams(queryParams).toString();
  const endpoint = queryString ? `/admin/logs?${queryString}` : '/admin/logs';
  
  return apiRequest(endpoint, {
    method: 'GET',
  });
};

// ========================================
// EXPORT PAR D√âFAUT
// ========================================

export default {
  // Auth
  login,
  logout,
  getMe,
  registerPatient,
  registerMedecin,
  verifyEmail,
  requestResetPassword,
  resetPassword,
  resetCodePatient,
  testApiConnection,
  testApiDetailed,
  
  // Dossiers
  createDossier,
  getPatientDossiers,
  getAutorisations,
  getDossier,
  updateDossier,
  getDossierHistorique,
  autoriserMedecin,
  uploadFichier,
  
  // Acc√®s
  demanderAcces,
  repondreDemande,
  revoquerAcces,
  listeAcces,
  
  // Admin
  promouvoirMedecinEnAdmin,
  validerAdminHopital,
  revoquerAdmin,
  validerMedecin,
  getMedecins,
  searchMedecins,
  supprimerMedecin,
  getUtilisateurs,
  reactiverUtilisateur,
  getLogs,
};
